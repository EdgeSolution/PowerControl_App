apply plugin: 'com.android.application'

ext {
    isRelease = checkRelease()
}

def checkRelease() {
    def runTasks = gradle.startParameter.taskNames
    for (String task : runTasks) {
        if (task.contains("assemble") && !task.contains("Debug")) {
            return true
        }
    }
    return false
}

def increasedVersionCode() {
    def propFile = file('../gradle.properties')
    Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    def code = props['VERSION_CODE'].toInteger()
    if (isRelease) {
        code++
        props['VERSION_CODE'] = code.toString()
        props.store(propFile.newWriter(), null)
    }
    return code
}

static def lastGitCommit() {
    try{
        return 'git log --pretty=format:%h -1'.execute().text.trim()
    }catch (ignored){
        return "0000000"
    }
}

def changeVersionName() {
    def propFile = file('../gradle.properties')
    Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    def code = props['VERSION_CODE'].toInteger()
    if (isRelease) {
        def gitCommitLog= lastGitCommit()
        return code+"."+gitCommitLog
    }
    return ""
}

android {
    signingConfigs {
        config { //rk3288 android6.0 system sign
            keyAlias 'android'
            keyPassword 'android'
            storePassword 'android'
            storeFile file('../platform.jks')
        }
    }
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.adv.poweronoff"
        minSdkVersion 22
        targetSdkVersion 28
        versionCode increasedVersionCode()
        versionName changeVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    applicationVariants.all { variant ->
        if ("release" == variant.buildType.name) {
            variant.outputs.all {
                outputFileName = "PowerOnOff_v${defaultConfig.versionName}.apk"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    productFlavors {
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    //implementation (name:'LocalMqtt-release',ext:'aar')
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
